server.port=8081

spring.jpa.show-sql=true

spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/springboot-web-service
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.format_sql=true

# 세션 저장소를 jdbc로 선택하도록 코드를 추가.
spring.session.store-type=jdbc
spring.session.jdbc.initialize-schema=always
spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-mysql.sql

logging.level.org.hibernate.SQL=debug

## h2 database setting ############################################################
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDB103Dialect
#spring.jpa.properties.hibernate.dialect.storage_engine=innodb
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#
#spring.datasource.hikari.jdbc-url=jdbc:h2:mem:testdb;MODE=MYSQL
#spring.datasource.driver-class-name=org.h2.Driver

#spring.h2.console.enabled=true
###################################################################################

# application-oauth
spring.profiles.include=oauth

# spring.profiles.include=oauth
#    SpringBoot에서는 properties의 이름을 application-xxx.properties로 만들면 xxx라는 이름의 profile이 생성되어
#    관리할 수 있다. 즉, profile=xxx라는 식으로 호출하면 해당 properties의 설정들을 가져올 수 있다.
#    호출하는 방식은 여러 방식이 있지만 여기서는 SpringBoot의 기본 설정 파일인 application.properties에서
#    application-oauth.properties를 포함하도록 구성한다.